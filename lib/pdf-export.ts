// PDF export utilities
export interface ReportData {
  title: string
  generatedAt: string
  generatedBy: string
  summary: {
    totalBooks: number
    totalMembers: number
    activeLoans: number
    overdueLoans: number
    reservations: number
  }
  charts: {
    bookCategories: Array<{ category: string; books: number; loans: number }>
    loanTrends: Array<{ date: string; loans: number; returns: number }>
    topBooks: Array<{ title: string; author: string; loans: number }>
  }
  overdueBooks: Array<{
    title: string
    member: string
    dueDate: string
    daysOverdue: number
  }>
}

export const generatePDFReport = async (data: ReportData): Promise<void> => {
  // Mock PDF generation - in real app, use libraries like jsPDF or Puppeteer
  const reportContent = `
    Library Management System Report
    Generated: ${data.generatedAt}
    Generated By: ${data.generatedBy}
    
    SUMMARY:
    - Total Books: ${data.summary.totalBooks}
    - Total Members: ${data.summary.totalMembers}
    - Active Loans: ${data.summary.activeLoans}
    - Overdue Loans: ${data.summary.overdueLoans}
    - Reservations: ${data.summary.reservations}
    
    TOP BOOKS:
    ${data.charts.topBooks
      .map((book, index) => `${index + 1}. ${book.title} by ${book.author} (${book.loans} loans)`)
      .join("\n")}
    
    OVERDUE BOOKS:
    ${data.overdueBooks.map((book) => `- ${book.title} (${book.member}) - ${book.daysOverdue} days overdue`).join("\n")}
  `

  // Create and download the report
  const blob = new Blob([reportContent], { type: "text/plain" })
  const url = URL.createObjectURL(blob)
  const link = document.createElement("a")
  link.href = url
  link.download = `library-report-${new Date().toISOString().split("T")[0]}.txt`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}

export const generateCSVReport = (data: any[], filename: string): void => {
  if (data.length === 0) return

  const headers = Object.keys(data[0])
  const csvContent = [
    headers.join(","),
    ...data.map((row) => headers.map((header) => `"${row[header] || ""}"`).join(",")),
  ].join("\n")

  const blob = new Blob([csvContent], { type: "text/csv" })
  const url = URL.createObjectURL(blob)
  const link = document.createElement("a")
  link.href = url
  link.download = `${filename}-${new Date().toISOString().split("T")[0]}.csv`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}
